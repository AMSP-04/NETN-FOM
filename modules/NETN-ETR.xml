<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objectModel xsi:schemaLocation="http://standards.ieee.org/IEEE1516-2010 http://standards.ieee.org/downloads/1516/1516.2-2010/IEEE1516-DIF-2010.xsd" xmlns="http://standards.ieee.org/IEEE1516-2010" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelIdentification notes="netn-etr_1">
        <name>NETN ETR</name>
        <type>FOM</type>
        <version>2.0 (Baseline MAR 2020)</version>
        <modificationDate>2020-03-20</modificationDate>
        <securityClassification>Not Classified</securityClassification>
        <purpose>The NETN ETR module provides a common standard interface for sending tasks to simulated entities represented in a federated distributed simulation. ETR contains common low level tasks that can easily be interpreted and executed by simulators that model the behavior of entities. It also defines a set of reports to provide status information, including the status of the tasks being executed by simulated entities.</purpose>
        <applicationDomain>Training</applicationDomain>
        <description>	
NATO Education and Training Network (NETN) Entity Tasking and Reports (ETR) Module. 
        
This module is a specification of how to represent simulation tasks requests provided to participants in a federated distributed simulation and simulator reports sent during the execution of tasks. The specification is based on IEEE 1516 High Level Architecture (HLA) Object Model Template (OMT) and primarily intended to support interoperability in a federated simulation (federation) based on HLA. An HLA OMT based Federation Object Model (FOM) is used to specify types of data and how it is encoded on the network. The NETN ETR FOM module is available as a XML file for use in HLA based federations.
        </description>
        <useLimitation> The NETN ETR FOM module is simulation oriented and focuses on tasks with a fine granularity: * It enables the transformation of command and control messages into tasks that can be executed by a simulator. * It defines status reports that can be used for producing command and control reports needed for decision making. * It supports the modelling of simulated command and control interactions between federates in a distributed simulation, for example during a MRM disaggregation process. * It contains a comprehensive set of tasks and reports that can easily be interpreted and executed by simulators. * It reflects the capabilities commonly found in COTS Computer Generated Forces (CGF) tools, but it is independent of a specific COTS CGF tool, agent framework, or agent modelling paradigm. * It is independent of any specific doctrine or tactics. An entity in ETR can be either a physical entity (e.g. platform or lifeform) or an aggregate entity. If a task or report relates to only a physical entity or to only an aggregate entity, then this is specified in the definition of the task. In the definition of each task it is not specified how an entity (physical or aggregate) will / should perform the task. 	</useLimitation>
        <useHistory>NETN-LBML_v1.1.0 - Developed by MSG-106 and MSG-134 for NETN-FOM v2.0.</useHistory>
        <useHistory>v2.0.0 - Renamed and updated by MSG-163 for NETN-FOM v3.0</useHistory>
        <poc>
            <pocType>Release authority</pocType>
            <pocName>NATO Modelling and Simulation Group</pocName>
            <pocOrg>NATO Science and Technology Organization</pocOrg>
            <pocEmail>msg@cso.nato.int</pocEmail>
        </poc>
        <poc>
            <pocType>Primary author</pocType>
            <pocName>MSG-163 Evolution of NATO Standards for Federated Simulation</pocName>
            <pocOrg>NATO Modelling and Simulation Group</pocOrg>
            <pocEmail>msg@cso.nato.int</pocEmail>
        </poc>
        <poc>
            <pocType>Primary author</pocType>
            <pocName>MSG-134 NATO Distributed Simulation Architecture &amp; Design, Compliance Testing and Certification</pocName>
            <pocOrg>NATO Modelling and Simulation Group</pocOrg>
            <pocEmail>msg@cso.nato.int</pocEmail>
        </poc>
        <poc>
            <pocType>Primary author</pocType>
            <pocName>MSG-106 Enhanced CAX Architecture, Desing and Methodology</pocName>
            <pocOrg>NATO Modelling and Simulation Group</pocOrg>
            <pocEmail>msg@cso.nato.int</pocEmail>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Henk Henderson</pocName>
            <pocOrg>TNO, the Netherlands</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Lennart Olsson</pocName>
            <pocOrg>Pitch Technologies, Sweden</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Tom van den Berg</pocName>
            <pocOrg>TNO, the Netherlands</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Björn Löfstrand</pocName>
            <pocOrg>Pitch Technologies, Sweden</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Martin Asprusten</pocName>
            <pocOrg>FFI, Norway</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Nico de Reus</pocName>
            <pocOrg>TNO, the Netherlands</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Rikke Amilde Løvlid</pocName>
            <pocOrg>FFI, Norway</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Ole-Martin Mevassvik</pocName>
            <pocOrg>FFI, Norway</pocOrg>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Anders Alstad</pocName>
            <pocOrg>FFI, Norway</pocOrg>
        </poc>
        <reference>
            <type>Dependency</type>
            <identification>NETN-BASE</identification>
        </reference>
        <other>
Copyright © 2019 by NATO/OTAN. All rights reserved.
This work is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License.

Above license gives you the right to use and redistribute the NETN FOM Module (XML file and Documentation) in its entirety without modification. You are also allowed to develop your own new FOM Modules (in separate XML files and separate documentation) that build-on/extends the NETN module by reference. You are NOT allowed to modify the NETN FOM Module or its documentation without prior permission by the NATO Modelling and Simulation Group.</other>
        <glyph type="png" height="48" width="48" alt="">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</glyph>
    </modelIdentification>
    <interactions>
        <interactionClass>
            <name>HLAinteractionRoot</name>
            <interactionClass>
                <name>ETR_Root</name>
                <sharing>Neither</sharing>
                <transportation>HLAreliable</transportation>
                <order>Receive</order>
                <semantics>Root interaction class for the Entitiy Tasking and Reporting (ETR) interaction classes.</semantics>
                <interactionClass>
                    <name>ETR_Task</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>A base interaction class for more specialized task interaction classes.</semantics>
                    <parameter>
                        <name>TaskId</name>
                        <dataType>TransactionId</dataType>
                        <semantics>Identifies the task.</semantics>
                    </parameter>
                    <parameter>
                        <name>Taskee</name>
                        <dataType>UuidArrayOfHLAbyte16</dataType>
                        <semantics>The entity that has to execute the task.</semantics>
                    </parameter>
                    <parameter>
                        <name>Tasker</name>
                        <dataType>Callsign</dataType>
                        <semantics>Identifies the commander of the task. 
When empty, the commander is not defined.</semantics>
                    </parameter>
                    <parameter>
                        <name>StartWhen</name>
                        <dataType>Datetime18</dataType>
                        <semantics>Time when the task execution has to start. Use the value 00000000000000.000 to indicate that the time is undefined.</semantics>
                    </parameter>
                    <parameter>
                        <name>Why</name>
                        <dataType>HLAunicodeString</dataType>
                        <semantics>For what reason has this task to be executed. 
When empty, the reason is not defined.</semantics>
                    </parameter>
                    <parameter>
                        <name>TaskMode</name>
                        <dataType>TaskModeEnum8</dataType>
                        <semantics>Determines the task mode.</semantics>
                    </parameter>
                    <parameter>
                        <name>CommunicationNetworkIds</name>
                        <dataType>ArrayOfUuid</dataType>
                        <semantics>List with ids to CommunicationNetworkIdentifier that represents the communication network. 
 
Optional.</semantics>
                    </parameter>
                    <interactionClass>
                        <name>Move</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to move in the specified direction for the given duration.</semantics>
                        <parameter>
                            <name>Direction</name>
                            <dataType>AngleRadianFloat32</dataType>
                            <semantics>Determines the azimuth direction, in radians.</semantics>
                        </parameter>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>The duration of the move (seconds)</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>MoveToLocation</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to move to the specified Location/Destination. 
 
The Location is required and the LocationUuId is optional. 
If both parameters are received then is up to the subscribing application to choose which to use. 
 
The Path is optional. If no Path is provided then the subscribing application shall assume it received a zero-length array. Also the PathUuid is optional. 
If both parameters are received then is up to the subscribing application to choose which to use. 
 
The interpretation of the Path is as follows: 
* The entity shall connect to the path from the current position to the nearest position or nearest waypoint in the path, depending on how the application manage this. 
* The entity shall leave the path at the the nearest position or nearest wapoint in the path and move to the Location/Destination, depending how the application manage this. 
 
This implies that the full path or a part of the path is used. An empty (zero length array) Path implies that the entity shall move from the current position directly to the Location.</semantics>
                        <parameter>
                            <name>Location</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The location to move to. Format: Geocentric.</semantics>
                        </parameter>
                        <parameter>
                            <name>LocationUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The location to move to. Refered by a UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>Path</name>
                            <dataType>ArrayOfWorldLocationStruct</dataType>
                            <semantics>Optional route to use to get to the Location/Destination.</semantics>
                        </parameter>
                        <parameter>
                            <name>PathUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Optional path to use to get to the Location/Destination. Refered by an UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>MoveType</name>
                            <dataType>MoveTypeEnum32</dataType>
                            <semantics>Indicates if roads have to be followed.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>MoveToEntity</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to move to another entity. 
 
The Path is optional. If no Path is provided then the subscribing application shall assume it received a zero-length array. Also the PathUuid is optional. 
If both parameters are received then is up to the subscribing application to choose which to use. 
 
The interpretation of the Path is as follows: 
* The entity shall connect to the path from the current position to the nearest position or nearest waypoint in the path, depending on how the application manage this. 
* The entity shall leave the path at the the nearest position or nearest wapoint in the path and move to the Location/Destination, depending how the application manage this. 
 
This implies that the full path or a part of the path is used. An empty (zero length array) Path implies that the entity shall move from the current position directly to the Location.</semantics>
                        <parameter>
                            <name>Entity</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The entity to move to. 
 
Required.</semantics>
                        </parameter>
                        <parameter>
                            <name>Path</name>
                            <dataType>ArrayOfWorldLocationStruct</dataType>
                            <semantics>Optional route to the specified entity.</semantics>
                        </parameter>
                        <parameter>
                            <name>PathUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Optional path to the specified entity.</semantics>
                        </parameter>
                        <parameter>
                            <name>MoveType</name>
                            <dataType>MoveTypeEnum32</dataType>
                            <semantics>Indicates if roads have to be followed.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>MoveIntoFormation</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an aggregate entity to move into the given formation with the given heading. 
 
At least one of Location and Destination paramter should be specified. If both are specified, it is up to the application to choose which to use.</semantics>
                        <parameter>
                            <name>Formation</name>
                            <dataType>FormationEnum32</dataType>
                            <semantics>The category of positional arrangement the aggregate.</semantics>
                        </parameter>
                        <parameter>
                            <name>Location</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The location (x, y and z) to move to.</semantics>
                        </parameter>
                        <parameter>
                            <name>LocationUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The location to make the formation at. 
 
Refered by a UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>Heading</name>
                            <dataType>AngleRadianFloat32</dataType>
                            <semantics>The heading of the formation in radians.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>FollowEntity</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to follow another entity.</semantics>
                        <parameter>
                            <name>Entity</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The entity to follow.</semantics>
                        </parameter>
                        <parameter>
                            <name>Behind</name>
                            <dataType>MeterFloat32</dataType>
                            <semantics>The distance in meters behind the entity to follow.</semantics>
                        </parameter>
                        <parameter>
                            <name>Right</name>
                            <dataType>MeterFloat32</dataType>
                            <semantics>The distance in meters to the right of the entity to follow.</semantics>
                        </parameter>
                        <parameter>
                            <name>Above</name>
                            <dataType>MeterFloat32</dataType>
                            <semantics>The distance in meters above the entity to follow.</semantics>
                        </parameter>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>The duration of the folow action (seconds).</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>TurnToHeading</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to turn to the specified heading.</semantics>
                        <parameter>
                            <name>Heading</name>
                            <dataType>AngleRadianFloat32</dataType>
                            <semantics>Determines the heading, in radians, an entity has to turn to.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>TurnToOrientation</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Tasks an entity to turn to a specified orientation, including pitch and roll.</semantics>
                            <parameter>
                                <name>Pitch</name>
                                <dataType>AngleRadianFloat32</dataType>
                                <semantics>Defines the angle ot the pitch.</semantics>
                            </parameter>
                            <parameter>
                                <name>Roll</name>
                                <dataType>AngleRadianFloat32</dataType>
                                <semantics>Defines the angle ot the roll.</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>Mount</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Task the entity to mount in the specified entity. The taskee entiity should be within a certain distance tolerance of the entiity to mount into. this tolerance must be specified in the federation agreements. Mount includes: embark (vessel), board (plane), and so on.</semantics>
                        <parameter>
                            <name>EntityId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Id of the entiy in which the taskee entity is mounted.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>Dismount</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Task the entity to dismount from the entity where it is in.</semantics>
                    </interactionClass>
                    <interactionClass>
                        <name>FireAtLocation</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to fire at a location. 
 
At least one of Location and Destination paramter should be specified. If both are specified, it is up to the application to choose which to use.</semantics>
                        <parameter>
                            <name>Location</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The location to fire at.</semantics>
                        </parameter>
                        <parameter>
                            <name>LocationUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The location to fire at. 
 
Refered by an UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>The duration of the fire (seconds).</semantics>
                        </parameter>
                        <interactionClass>
                            <name>FireAtLocationWM</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Tasks an entity to fire at a location with the specified weapon and munition.</semantics>
                            <parameter>
                                <name>WeaponTypeToUse</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>Preferd weapon type.</semantics>
                            </parameter>
                            <parameter>
                                <name>MunitionTypeToUse</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>Prefered muntion type.</semantics>
                            </parameter>
                            <parameter>
                                <name>QuantityFired</name>
                                <dataType>Integer16</dataType>
                                <semantics>Number of rounds to fire</semantics>
                            </parameter>
                            <parameter>
                                <name>RateOfFire</name>
                                <dataType>Float32</dataType>
                                <semantics>Number of rounds per second.</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>FireAtEntity</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to fire at another specified entity.</semantics>
                        <parameter>
                            <name>Target</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The entity to fire at.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>FireAtEntityWM</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Tasks an entity to fire at a specified entity with the specified weapon and munition.</semantics>
                            <parameter>
                                <name>WeaponTypeToUse</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>Preferd weapon type.</semantics>
                            </parameter>
                            <parameter>
                                <name>MunitionTypeToUse</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>Prefered munition type.</semantics>
                            </parameter>
                            <parameter>
                                <name>QuantityFired</name>
                                <dataType>Integer16</dataType>
                                <semantics>Number of rounds.</semantics>
                            </parameter>
                            <parameter>
                                <name>RateOfFire</name>
                                <dataType>Float32</dataType>
                                <semantics>Number of rounds per second.</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>SetOrderedSpeed</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Set/Change the ordered speed. Usually sent in ConcurrentMode to adjust the current move task.</semantics>
                        <parameter>
                            <name>Speed</name>
                            <dataType>VelocityMeterPerSecondFloat32</dataType>
                            <semantics>Determines the ordered speed to set for an entity, in m/s.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>SetOrderedAltitude</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Set/Change the ordered altitude for a flying entity. Usually sent in ConurrentMode to adjust the current move task.</semantics>
                        <parameter>
                            <name>Altitude</name>
                            <dataType>AltitudeMeterFloat64</dataType>
                            <semantics>Defines the altitude.</semantics>
                        </parameter>
                        <parameter>
                            <name>AltitudeType</name>
                            <dataType>AltitudeTypeEnum8</dataType>
                            <semantics>Above the ground or sea.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>Wait</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to wait a defined duration.</semantics>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>Specifies the wait time (seconds).</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>SetRulesOfEngagement</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Change the rules of engagment for an entity.</semantics>
                        <parameter>
                            <name>RulesOfEngagement</name>
                            <dataType>RulesOfEngagementEnum8</dataType>
                            <semantics>Determines the rules of engagment for a entity.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>EstablishCheckPoint</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>The task defines a location where a checkpoint shall be established and then operated. 
At least one of Location and Destination paramter should be specified. If both are specified, it is up to the application to choose which to use. 
 
If the Taskee entity is not at the specified location, it has to move to that location with a seperate move task. 
The taskee entiity should be within a certain distance tolerance (specified in the federation agreements) of the location where the checkpoint should be established to make the task possible. 
 
A CheckPoint instance (NETN-SE NETN_Facility.CheckPoint) shall be created and registerd when the entity reaches the location for the checkpoint. The attribute CheckPoint.Status shall show the status of the checkpoint. 
 
The modelling federate decides when the checkpoint shall be activated, it may be direct at the creation or when the attribute PercentComplete has reached a threshold level. 
 
If  parameter Location is specified and Destination is not specified: 
The modelling federate shall register a NETN-SE NETN_GeoPoint.Point instance to model the checkpoint. 
Set the attribute NETN_Facility.CheckPoint.LocationReference to the Point.UniqueId. 
 
The Duration defines the time when the checkpoint is active by the specified Taskee. 
 
See semantics for object class NETN-SE NETN_Facility.CheckPoint for implications on entities passing a CheckPoint. 
 
The federation agreements shall specify how the ownership of the dynamic attribute at the checkpoint shall be managed when the checkpoint is deactivated. One of the following cases shall be managed in the federation: 
 
1. Dynamic attributes of the checkpoint are released with the HLA Ownership Management services unconditionalAttributeOwnershipDivestiture at deactivation. 
 
2. Only one federate may establish and operate a specific checkpoint. 
 
3. Use NETN TMR Pattern, the federate modelling the entity that shall operate the checkpoint requests the ownership from the current owner of the dynamic attributes.</semantics>
                        <parameter>
                            <name>Name</name>
                            <dataType>HLAunicodeString</dataType>
                            <semantics>Name of the Check Point.</semantics>
                        </parameter>
                        <parameter>
                            <name>Location</name>
                            <dataType>PointVariantStruct</dataType>
                            <semantics>The position for the Check Point.</semantics>
                        </parameter>
                        <parameter>
                            <name>LocationUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The location for the checkpoint. 
 
Refered by an UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>The duration of the action (seconds)</semantics>
                        </parameter>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>May be generated by the current system if not defined. 
(The modelling application creates a object instance of the object class NETN-SE CheckPoint)</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>OperateCheckPoint</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>The task activates a deactivated check point. 
 
If the Taskee entity is not at the checkpoint location, it has to move to that location with a seperate move task. 
The taskee entiity should be within a certain distance tolerance (specified in the federation agreements) of the location of the checkpoint to make the task possible. 
 
The attribute CheckPoint.Status shall show the status at the checkpoint. 
 
See semantics for the interaction EstablishCheckPoint how ownership of the dynamics attribute at the checkpoint instance shall be managed. 
 
See semantics for object class CheckPoint in NETN-SE FOM for implications on entities passing a CheckPoint.</semantics>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Identifier for the CheckPoint</semantics>
                        </parameter>
                        <parameter>
                            <name>Duration</name>
                            <dataType>TimeSecInt32</dataType>
                            <semantics>The duration of the action  (seconds)</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>StopAtSideOfRoad</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to stop at the side of the road. This task is only relevant for an entity that is moving along a road to a destination. The executing move task is canceled and a new move is defined to a position at the side of the road (the simulator has to calculate this location).</semantics>
                    </interactionClass>
                    <interactionClass>
                        <name>RemoveCheckPoint</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This task removes the checkpoint that is generated in the EstablishCheckpoint task. 
 
If the Taskee entity is not at the specified location, it has to move to that location with a seperate move task. 
The taskee entiity should be within a certain distance tolerance (specified in the federation agreements) of the location of the checkpoint to make the task possible. 
 
A CheckPoint instance (NETN-SE NETN_Facility.CheckPoint) shall be removed from the Federation Execution when the entity reaches the location for the checkpoint. 
 
If a NETN_CulturalFeature instance is assigned to the checkpoint is shall be deleted.</semantics>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Identifier for the CheckPoint</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>CreateObstacle</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to create an obstacle with the given geometry. 
The taskee entiity should be within a certain distance tolerance (specified in the federation aggrement) of one of the points of the geometry of the obstacle to make the task possible. 
The corresponding Environment Object instance  in the RPR-FOM should be created.</semantics>
                        <parameter>
                            <name>ObstacleType</name>
                            <dataType>EntityTypeStruct</dataType>
                            <semantics>The type of the obstacle defined by the entity type of the obstacle (SISO REF-010-2018 Land Culture Features) .</semantics>
                        </parameter>
                        <parameter>
                            <name>GeometryType</name>
                            <dataType>GeometryEnum32</dataType>
                            <semantics>The type of the geometry which can be Point, Polygon or Area</semantics>
                        </parameter>
                        <parameter>
                            <name>Geometry</name>
                            <dataType>ArrayOfWorldLocationStruct</dataType>
                            <semantics>A set of points defining the point, polygon or area of the Obstacle.</semantics>
                        </parameter>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>A unique UUID of the Obstacle.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>CreateMinefield</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Tasks an entity to create a minefield within the specified geometry. The taskee should publish the minefield as a RPR-FOM object when finished. This interaction should not be confused with the MinefieldObjectTransaction interaction of the RPR-FOM, which asks a federate directly to “magic create” a minefield. Warning: The RPR-FOM contains several ways of representing a minefield, and the taskee may decide which representation to use. It is recommended to agree on this in advance, through the use of a Federation Agreement. 
Allowed values for attributes of the parent (CreateObstacle): 
- ObstacleType = (5.1.0.5.10.*.* or 5.1.0.5.11.*.* or 5.1.0.5.12.*.*) 
- GeometryType = Area</semantics>
                            <parameter>
                                <name>TypeOfMines</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>Type of mines used defined by the EntityTypeStruct see  section 15.5, UID 418, SISO-REF-010-2018.</semantics>
                            </parameter>
                            <parameter>
                                <name>MineCount_MineDensity</name>
                                <dataType>MineCountVariantStruct</dataType>
                                <semantics>Can contain either the count of mines, or the density</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>ClearObstacle</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Task an entity to clear the obstacle or minefield with the given ID. The taskee entiity should be within a certain distance tolerance (specified in the federation aggrement) of one of the points of the geometry of the obstacle to make the task possible.</semantics>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>A unique UUID of the Obstacle.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>AddPassage</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to lay/build a passage between the two given points. The passage can for example be a passage through an obstacle or a bridge over a river. The taskee entiity should be within a certain distance tolerance (specified in the federation aggrement) of one of the points of the passage to make the task possible. 
The corresponding Environment Object instance in the RPR-FOM should be created.</semantics>
                        <parameter>
                            <name>Point1</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The line between point1 and point2 defines the geometry of the passage.</semantics>
                        </parameter>
                        <parameter>
                            <name>Point2</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The line between point1 and point2 defines the geometry of the passage.</semantics>
                        </parameter>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>A unique UUID of the passage.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>RemovePassage</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Tasks an entity to remove the pasasage with the given ID. The taskee entiity should be within a certain distance tolerance (specified in the federation aggrement) of one of the points of the passage to make the task possible.</semantics>
                        <parameter>
                            <name>UniqueId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>A unique UUID of the passage.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>Patrol</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Defines a patrol task, covering the path from the current location to the start point of the patrol route, and the patrol route itself. 
 
The patrol route shall be followed from start to end. 
 
The entity behaviour at the end point depends on the patrol type.</semantics>
                        <parameter>
                            <name>Path</name>
                            <dataType>ArrayOfWorldLocationStruct</dataType>
                            <semantics>Specifies the route to patrol, as a pylogonal chain.</semantics>
                        </parameter>
                        <parameter>
                            <name>PathUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Specifies the route to patrol, refered by an UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>PatrolType</name>
                            <dataType>PatrolTypeEnum32</dataType>
                            <semantics>Defines how the patrol shall be excuted. The total move from the start point to start point (for patroltype is circle and reverse) is defined as one cycle (see also PatrolRepeating).</semantics>
                        </parameter>
                        <parameter>
                            <name>MoveType</name>
                            <dataType>PatrolMoveTypeEnum32</dataType>
                            <semantics>Defines how the entity shall move during the patrol route.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>PatrolRepeating</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Task an entity to repeat a patrol task for the given duration. For this task the patrol type other is not allowed. 
 
When the duration time has elapsed then the last cycle of the patrol will be completed before the task ends. 
 
If the time of a cycle takes longer then the interval time then the cylce starts directly (without delay). If the time of a cylce takes less then the interval time then the entiy waits in the first point for the remaining time before the next cycle is started.</semantics>
                            <parameter>
                                <name>Duration</name>
                                <dataType>TimeSecInt32</dataType>
                                <semantics>The duration of the total patrol task.</semantics>
                            </parameter>
                            <parameter>
                                <name>IntervalTime</name>
                                <dataType>TimeSecInt32</dataType>
                                <semantics>The interval time between two cycles.</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>SetTransmitterStatus</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Task entity to switch on/off all of its transmitters.</semantics>
                        <parameter>
                            <name>Status</name>
                            <dataType>TransmitterOperationalStatusEnum8</dataType>
                            <semantics>Status on the transmitter.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>Observe</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Observation to cover area with sensors. It can be used in parallel to movement tasks such as Move</semantics>
                        <parameter>
                            <name>ObservationArea</name>
                            <dataType>GeocentricPolygon</dataType>
                            <semantics>Area to observe.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>Jamming</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Jamming of a communication network in a specified area.</semantics>
                        <parameter>
                            <name>JammedArea</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>Area affected by jamming.</semantics>
                        </parameter>
                        <parameter>
                            <name>CommunicationNetworkId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Reference to the affected Communication Network.</semantics>
                        </parameter>
                        <parameter>
                            <name>JammingEnabled</name>
                            <dataType>HLAboolean</dataType>
                            <semantics>Jamming enabled or disabled.</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>ETR_Report</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>A base interaction class for more specialized report interaction classes.</semantics>
                    <parameter>
                        <name>ReportId</name>
                        <dataType>TransactionId</dataType>
                        <semantics>Identifies the Report</semantics>
                    </parameter>
                    <parameter>
                        <name>When</name>
                        <dataType>Datetime18</dataType>
                        <semantics>Date and time when the reported status was valid.</semantics>
                    </parameter>
                    <parameter>
                        <name>CommunicationNetworkIds</name>
                        <dataType>ArrayOfUuid</dataType>
                        <semantics>List with ids to CommunicationNetworkIdentifier that represents the communication network. 
 
Optional.</semantics>
                    </parameter>
                    <parameter>
                        <name>Comments</name>
                        <dataType>HLAunicodeString</dataType>
                        <semantics>Any additional comments</semantics>
                    </parameter>
                    <interactionClass>
                        <name>StatusReport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Status report from an entity about its own (perceived) state. This report is generated with a certain frequency specified in the federation agreements.</semantics>
                        <parameter>
                            <name>EntityId</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The entity that is reported about.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>PositionStatusReport</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Report about the position, speed, and heading of the entity.</semantics>
                            <parameter>
                                <name>Position</name>
                                <dataType>WorldLocationStruct</dataType>
                                <semantics>Position of the entity at the specified time.</semantics>
                            </parameter>
                            <parameter>
                                <name>Heading</name>
                                <dataType>AngleRadianFloat32</dataType>
                                <semantics>Heading of the entity.</semantics>
                            </parameter>
                            <parameter>
                                <name>Speed</name>
                                <dataType>VelocityMeterPerSecondFloat32</dataType>
                                <semantics>Speed of the entity.</semantics>
                            </parameter>
                        </interactionClass>
                        <interactionClass>
                            <name>DamageStatusReport</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Damage status report of an entity. The possible damage staets are possible: NoDamage, SlightDamage, ModerateDamage, SignificantDamage, Destroyed.</semantics>
                            <parameter>
                                <name>DamageType</name>
                                <dataType>DamageStatusEnhancedEnum32</dataType>
                                <semantics>Damage state of the reported entity.</semantics>
                            </parameter>
                        </interactionClass>
                        <interactionClass>
                            <name>ResourceStatusReport</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Report about the remaning amount of a resource.</semantics>
                            <parameter>
                                <name>Resource</name>
                                <dataType>NETN_SupplyStruct</dataType>
                                <semantics>The type of resource and remaining quantity.</semantics>
                            </parameter>
                        </interactionClass>
                        <interactionClass>
                            <name>UnderAttackStatusReport</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>Report that the entity is under attack.</semantics>
                            <parameter>
                                <name>FromDirection</name>
                                <dataType>AngleRadianFloat32</dataType>
                                <semantics>FromDirection (Direction from which the entity is attacked, between 0..2π or -1 when not specified.)</semantics>
                            </parameter>
                            <parameter>
                                <name>Severeness</name>
                                <dataType>AttackTypeEnum32</dataType>
                                <semantics>Severeness of the attack upon the reporting entity.</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>SpotReport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Spot reports are reports used by all entities to transmit intelligence or information about a spotted enemy, neutral, or unknown entity.</semantics>
                        <parameter>
                            <name>Observer</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Entity that observed the enemy (or neutral/unknown entity) and sends the spot report.</semantics>
                        </parameter>
                        <parameter>
                            <name>IdentificationLevel</name>
                            <dataType>IdentificationLevelEnum8</dataType>
                            <semantics>The identification level of the entit(y)(ies) spotted.</semantics>
                        </parameter>
                        <parameter>
                            <name>SpottedEntities</name>
                            <dataType>ArrayOfSpottedEntities</dataType>
                            <semantics>Spotted entities at the time specified in the parameter 'When'.</semantics>
                        </parameter>
                        <interactionClass>
                            <name>SensorReport</name>
                            <sharing>PublishSubscribe</sharing>
                            <transportation>HLAreliable</transportation>
                            <order>Receive</order>
                            <semantics>The entities that have been observed by a specific sensor. The attributes can be: Detected, Recognized or Identified.</semantics>
                            <parameter>
                                <name>SensorType</name>
                                <dataType>EntityTypeStruct</dataType>
                                <semantics>The type of the sensor that detected the entit(y)(ies).</semantics>
                            </parameter>
                        </interactionClass>
                    </interactionClass>
                    <interactionClass>
                        <name>InWeaponRangeReport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>The entities that are in range of a specific weapon.</semantics>
                        <parameter>
                            <name>Observer</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>Entity that observed the enemy (or neutral/unknown entity) and sends the report.</semantics>
                        </parameter>
                        <parameter>
                            <name>WeaponType</name>
                            <dataType>EntityTypeStruct</dataType>
                            <semantics>The type of the weapon.</semantics>
                        </parameter>
                        <parameter>
                            <name>EntitiesInWeaponRange</name>
                            <dataType>ArrayOfUuid</dataType>
                            <semantics>Array with entities.</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>ETR_TaskManagement</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>A base interaction class for more specialized task management interaction classes.</semantics>
                    <parameter>
                        <name>TaskManagementId</name>
                        <dataType>TransactionId</dataType>
                        <semantics>Identifies the management task.</semantics>
                    </parameter>
                    <parameter>
                        <name>Taskee</name>
                        <dataType>UuidArrayOfHLAbyte16</dataType>
                        <semantics>The entity that has to execute the task.</semantics>
                    </parameter>
                    <parameter>
                        <name>Tasker</name>
                        <dataType>Callsign</dataType>
                        <semantics>Identifies the commander of the task.</semantics>
                    </parameter>
                    <interactionClass>
                        <name>CancelSpecifiedTasks</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Cancel all specified tasks. Tasks already started are also cancelled.</semantics>
                        <parameter>
                            <name>Tasks</name>
                            <dataType>ArrayOfTaskIds</dataType>
                            <semantics>Tasks that have to be cancelled.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>CancelAllTasks</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Cancel all tasks. Tasks already started are also cancelled.</semantics>
                    </interactionClass>
                    <interactionClass>
                        <name>TaskStatusReport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>A report about the status of a task given to an entity. The status of the task defined by the TaskId can be: Accepted, Refused, Cancelled, Executing, Completed or Error.</semantics>
                        <parameter>
                            <name>TaskId</name>
                            <dataType>TransactionId</dataType>
                            <semantics>Identifies the task associated with the task report.</semantics>
                        </parameter>
                        <parameter>
                            <name>TaskStatus</name>
                            <dataType>TaskStatusEnum32</dataType>
                            <semantics>Indicates the evaluation status of the task.</semantics>
                        </parameter>
                        <parameter>
                            <name>When</name>
                            <dataType>Datetime18</dataType>
                            <semantics>Creation date and time of the report.</semantics>
                        </parameter>
                        <parameter>
                            <name>Comments</name>
                            <dataType>HLAunicodeString</dataType>
                            <semantics>Any additional comments. For example reason for cancelling, error, etc.</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>ETR_SimCon</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>A base interaction class for EXCON Task interaction classes.</semantics>
                    <parameter>
                        <name>TaskId</name>
                        <dataType>TransactionId</dataType>
                        <semantics>Identifies the task</semantics>
                    </parameter>
                    <parameter>
                        <name>Taskee</name>
                        <dataType>UuidArrayOfHLAbyte16</dataType>
                        <semantics>The entity that has to execute the task</semantics>
                    </parameter>
                    <parameter>
                        <name>Tasker</name>
                        <dataType>Callsign</dataType>
                        <semantics>Indetifies the commander of the task.</semantics>
                    </parameter>
                    <interactionClass>
                        <name>MagicMove</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>At least one of Location and Destination paramter should be specified. If both are specified, it is up to the application to choose which to use. 
 
Place the entity to the specified location with a given heading. All given task of the entity are cancelled.</semantics>
                        <parameter>
                            <name>Location</name>
                            <dataType>WorldLocationStruct</dataType>
                            <semantics>The new location for the entity.</semantics>
                        </parameter>
                        <parameter>
                            <name>LocationUuid</name>
                            <dataType>UuidArrayOfHLAbyte16</dataType>
                            <semantics>The new location for the entity. Refered by a UUID.</semantics>
                        </parameter>
                        <parameter>
                            <name>Heading</name>
                            <dataType>AngleRadianFloat32</dataType>
                            <semantics>The entity is set in the position without a move order and without using simulation time (magic placement). 
The orienation will be set in the given heading.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>MagicResource</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Changes the resource amount of the entity.</semantics>
                        <parameter>
                            <name>Resource</name>
                            <dataType>NETN_SupplyStruct</dataType>
                            <semantics>Defines the resource type that will get a new quantity value.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>QueryCapabilitiesSupported</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Query which ETR tasks and ETR reports that the entity supports. The taskee shall respond with a CapabilitiesSupported message.</semantics>
                    </interactionClass>
                    <interactionClass>
                        <name>CapabilitiesSupported</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Provide the set of ETR tasks and ETR reports that the entity supports. This interaction is in response to a QueryCapabilitiesSupported, using the same Taskee and Tasker.</semantics>
                        <parameter>
                            <name>CapabilityNames</name>
                            <dataType>ArrayOfNames</dataType>
                            <semantics>Array of task and report names that the entity supports; the names match with the FOM interaction class names.</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
            </interactionClass>
        </interactionClass>
    </interactions>
    <dataTypes>
        <simpleDataTypes/>
        <enumeratedDataTypes>
            <enumeratedData>
                <name>RulesOfEngagementEnum8</name>
                <representation>HLAoctet</representation>
                <semantics>Rules of engagment for a simulated entity.</semantics>
                <enumerator>
                    <name>HoldFire</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>FireAtWill</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>FireWhenFiredUpon</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>TaskStatusEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>The status of a task.</semantics>
                <enumerator>
                    <name>Accepted</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Refused</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Cancelled</name>
                    <value>2</value>
                </enumerator>
                <enumerator>
                    <name>Executing</name>
                    <value>3</value>
                </enumerator>
                <enumerator>
                    <name>Completed</name>
                    <value>4</value>
                </enumerator>
                <enumerator>
                    <name>Error</name>
                    <value>5</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>IdentificationLevelEnum8</name>
                <representation>HLAoctet</representation>
                <semantics>The identification level of an object.</semantics>
                <enumerator>
                    <name>Lost</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Detected</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Classified</name>
                    <value>2</value>
                </enumerator>
                <enumerator>
                    <name>Identified</name>
                    <value>3</value>
                </enumerator>
                <enumerator>
                    <name>FullKnowledge</name>
                    <value>4</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>MoveTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>CrossCountry: move directly to the destination without taking into account the roads. 
OnlyRoads: stay on the roads to get to the closest point to the destination that is still on a road; if there is no road very near to the start (within around 10 meters) there will be no movement at all. 
RoadsAndCrossCountry: move to the destination by taking into account the roads; it is allowed to go off the road.</semantics>
                <enumerator>
                    <name>CrossCountry</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>OnlyRoads</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>RoadsAndCrossCountry</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>AttackTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>The kind of attack by the enemy.</semantics>
                <enumerator>
                    <name>None</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Artillery</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>HeavyArtillery</name>
                    <value>2</value>
                </enumerator>
                <enumerator>
                    <name>Other</name>
                    <value>3</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>TaskModeEnum8</name>
                <representation>HLAoctet</representation>
                <semantics>Execute task in non-concurrent mode or concurrent mode. 
 
In the non-concurrent mode the task is placed on the task list for the entity, which serves as a waiting list. Once the task is at the head of the task list, and the currently executing task completes, it is removed from the task list and started. Using this task mode, tasks are executed one after the other. 
 
In the concurrent mode, the task is executed concurrently with other tasks. As soon as the task is accepted for an entity, it is started. With this task mode, there is no task list involved.</semantics>
                <enumerator>
                    <name>NonConcurrentMode</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>ConcurrentMode</name>
                    <value>1</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>PatrolTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>Other - Behaviour is federate application specific (e.g. wait for next command, etc.) 
Circle - Move to start point of patrol route (federate application deterrmines route) 
Reverse - Follow the patrol route in reverse order.</semantics>
                <enumerator>
                    <name>Other</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Circle</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Reverse</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>PatrolMoveTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>Defines how the movment shall be done during the execution of the patrol. 
Other - Federate application specific.</semantics>
                <enumerator>
                    <name>Other</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Stealth</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Caution</name>
                    <value>2</value>
                </enumerator>
                <enumerator>
                    <name>Open</name>
                    <value>3</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>GeometryEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>The type of geometry.</semantics>
                <enumerator>
                    <name>Point</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Polygon</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Area</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>MineCountEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>Type of mine count.</semantics>
                <enumerator>
                    <name>MineNumber</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>MineDensity</name>
                    <value>1</value>
                </enumerator>
            </enumeratedData>
        </enumeratedDataTypes>
        <arrayDataTypes>
            <arrayData>
                <name>Datetime18</name>
                <dataType>HLAunicodeChar</dataType>
                <cardinality>18</cardinality>
                <encoding>HLAfixedArray</encoding>
                <semantics>A designation of a specified chronological point measured using Coordinated Universal Time (UTC) ISO 8601:2000 as a standard of reference, constrained to "zero meridian" i.e. �Zulu� time zone only. This is expressed as a composite field using a compacted ISO notation YYYYMMDDHHMMSS.SSS where YYYY represents a year, MM represents a month in values from 00 to 12, and DD represents a day in values from 00 to 31, HH represents an hour, MM represents a minute, and SS.SSS represents the number of seconds and milliseconds.</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfTaskIds</name>
                <dataType>TransactionId</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>Array of Task Ids.</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfNames</name>
                <dataType>HLAASCIIstring</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>Array of Names.</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfSpottedEntities</name>
                <dataType>SpottedEntity</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>The spotted entities at a specific time</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfSpottedEquipment</name>
                <dataType>SpottedEquipment</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>An array with spotted equipment at the spotted entity.</semantics>
            </arrayData>
        </arrayDataTypes>
        <fixedRecordDataTypes>
            <fixedRecordData>
                <name>SpottedEntity</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Descripton of the observed entity. 
The symbol contains information about the spotted entity's relation to the spotter and details about the type and echelon at the spotted entity.</semantics>
                <field>
                    <name>SpottedEntity</name>
                    <dataType>UuidArrayOfHLAbyte16</dataType>
                    <semantics>The unique identifier for the entity</semantics>
                </field>
                <field>
                    <name>Location</name>
                    <dataType>WorldLocationStruct</dataType>
                    <semantics>The location where the entity were spotted</semantics>
                </field>
                <field>
                    <name>Orientation</name>
                    <dataType>OrientationStruct</dataType>
                    <semantics>The orientation in Psi, Theta, Phi [radians]</semantics>
                </field>
                <field>
                    <name>Speed</name>
                    <dataType>VelocityMeterPerSecondFloat32</dataType>
                    <semantics>The speed of the entity (m/s). 
 
Default value: 0 m/s</semantics>
                </field>
                <field>
                    <name>Equipment</name>
                    <dataType>ArrayOfSpottedEquipment</dataType>
                    <semantics>Spotted equipment list, type and number. 
 
Default value: Empty array.</semantics>
                </field>
                <field>
                    <name>Activity</name>
                    <dataType>AggregateMissionEnum16</dataType>
                    <semantics>The current activity of the entity. (Fromm NETN-Base) 
Default value: Moving (213)</semantics>
                </field>
                <field>
                    <name>Symbol</name>
                    <dataType>SymbolIdentifierArray15</dataType>
                    <semantics>MIL STD 2525C for the entity, the detailed level may vary, the publishing federate decides the level of details in the symbol description. 
 
Default Ground value: SUGP------***** 
Default Air value: SUAP------***** 
Default Sea Surface value: SUSP------***** 
Default Subsurface value: SUUP------*****</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>SpottedEquipment</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Equipment at the spotted entity.</semantics>
                <field>
                    <name>Type</name>
                    <dataType>EntityTypeStruct</dataType>
                    <semantics>Use entity types from Supply Types, Expendibles or Sensors/Emitters tables  (SISO-REF-010-2010, 4.3), 
for aggregate entities, also use entity types from platform tables to describe the equipment type.</semantics>
                </field>
                <field>
                    <name>NumberOfEquipment</name>
                    <dataType>QuantityInt32</dataType>
                    <semantics>The number of the equipment.</semantics>
                </field>
            </fixedRecordData>
        </fixedRecordDataTypes>
        <variantRecordDataTypes>
            <variantRecordData>
                <name>MineCountVariantStruct</name>
                <discriminant>MineCountType</discriminant>
                <dataType>MineCountEnum32</dataType>
                <alternative>
                    <enumerator>MineNumber</enumerator>
                    <name>MineNumber</name>
                    <dataType>Integer32</dataType>
                    <semantics>Number of mines.</semantics>
                </alternative>
                <alternative>
                    <enumerator>MineDensity</enumerator>
                    <name>MineDensity</name>
                    <dataType>PercentFloat32</dataType>
                    <semantics>Percentage of mines.</semantics>
                </alternative>
                <encoding>HLAvariantRecord</encoding>
                <semantics>The number or density of mines.</semantics>
            </variantRecordData>
        </variantRecordDataTypes>
    </dataTypes>
    <notes>
        <note>
            <label>netn-etr_1</label>
            <semantics>The interaction classes are organized in a root class and four base classes: ETR_Task, ETR_Report, ETR_TaskManagement, and ETR_SimCon. 
 
* ETR_Root: root interaction class for the Entitiy Tasking and Reporting (ETR) interaction classes. 
* ETR_Task: A base interaction class for more specialized task interaction classes. 
* ETR_Report: A base interaction class for more specialized report interaction classes. 
* ETR_TaskManagement: A base interaction class for more specialized task management interaction classes. 
* ETR_SimCon: A base interaction class for more specialized Simulation Control (SimCon) interaction classes</semantics>
        </note>
    </notes>
</objectModel>
